require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Account::DiaryDaysController do
  before (:each) do
    @user = Factory.create(:user)
    sign_in @user
    @character = @user.characters.create(Factory.attributes_for(:character))
  end

  # This should return the minimal set of attributes required to create a valid
  # DiaryDay. As you add validations to DiaryDay, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    Factory.attributes_for(:diary_day, :character => @character)
  end

  describe "GET index" do
    it "assigns all diary_days as @diary_days" do
      diary_day = DiaryDay.create! valid_attributes
      get :index, :character_id => @character.id.to_s
      assigns(:diary_days).should eq([diary_day])
    end
  end

  describe "GET show" do
    it "assigns the requested diary_day as @diary_day" do
      diary_day = DiaryDay.create! valid_attributes
      get :show, :character_id => @character.id.to_s, :id => diary_day.id.to_s
      assigns(:diary_day).should eq(diary_day)
    end
  end

  describe "GET new" do
    it "assigns a new diary_day as @diary_day" do
      get :new, :character_id => @character.id.to_s
      assigns(:diary_day).should be_a_new(DiaryDay)
    end
  end

  describe "GET edit" do
    it "assigns the requested diary_day as @diary_day" do
      diary_day = DiaryDay.create! valid_attributes
      get :edit, :character_id => @character.id.to_s, :id => diary_day.id.to_s
      assigns(:diary_day).should eq(diary_day)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new DiaryDay" do
        expect {
          post :create, :character_id => @character.id.to_s, :diary_day => valid_attributes
        }.to change(DiaryDay, :count).by(1)
      end

      it "assigns a newly created diary_day as @diary_day" do
        post :create, :character_id => @character.id.to_s, :diary_day => valid_attributes
        assigns(:diary_day).should be_a(DiaryDay)
        assigns(:diary_day).should be_persisted
      end

      it "redirects to the created diary_day" do
        post :create, :character_id => @character.id.to_s, :diary_day => valid_attributes
        response.should redirect_to(account_character_diary_day_url(DiaryDay.last.character, DiaryDay.last))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved diary_day as @diary_day" do
        # Trigger the behavior that occurs when invalid params are submitted
        DiaryDay.any_instance.stub(:save).and_return(false)
        post :create, :character_id => @character.id.to_s, :diary_day => {}
        assigns(:diary_day).should be_a_new(DiaryDay)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        DiaryDay.any_instance.stub(:save).and_return(false)
        post :create, :character_id => @character.id.to_s, :diary_day => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested diary_day" do
        diary_day = DiaryDay.create! valid_attributes
        # Assuming there are no other diary_days in the database, this
        # specifies that the DiaryDay created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        DiaryDay.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :character_id => @character.id.to_s, :id => diary_day.id, :diary_day => {'these' => 'params'}
      end

      it "assigns the requested diary_day as @diary_day" do
        diary_day = DiaryDay.create! valid_attributes
        put :update, :character_id => @character.id.to_s, :id => diary_day.id, :diary_day => valid_attributes
        assigns(:diary_day).should eq(diary_day)
      end

      it "redirects to the diary_day" do
        diary_day = DiaryDay.create! valid_attributes
        put :update, :character_id => @character.id.to_s, :id => diary_day.id, :diary_day => valid_attributes
        response.should redirect_to(account_character_diary_day_url(diary_day.character, diary_day))
      end
    end

    describe "with invalid params" do
      it "assigns the diary_day as @diary_day" do
        diary_day = DiaryDay.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        DiaryDay.any_instance.stub(:save).and_return(false)
        put :update, :character_id => @character.id.to_s, :id => diary_day.id.to_s, :diary_day => {}
        assigns(:diary_day).should eq(diary_day)
      end

      it "re-renders the 'edit' template" do
        diary_day = DiaryDay.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        DiaryDay.any_instance.stub(:save).and_return(false)
        put :update, :character_id => @character.id.to_s, :id => diary_day.id.to_s, :diary_day => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested diary_day" do
      diary_day = DiaryDay.create! valid_attributes
      expect {
        delete :destroy, :character_id => @character.id.to_s, :id => diary_day.id.to_s
      }.to change(DiaryDay, :count).by(-1)
    end

    it "redirects to the diary_days list" do
      diary_day = DiaryDay.create! valid_attributes
      delete :destroy, :character_id => @character.id.to_s, :id => diary_day.id.to_s
      response.should redirect_to(account_character_diary_days_url(diary_day.character))
    end
  end

end
